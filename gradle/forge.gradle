repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = "https://maxanier.de/maven2"
    }
    maven {
        url = "https://maven.paube.de"
    }
    mavenCentral()
    mavenLocal()
}


dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}:api") //API for compile (not POM)
    runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}") //Full for runtime (not POM)
    implementation fg.deobf("de.maxanier.guideapi:Guide-API-VP:${project.guideapi_version}")
    implementation fg.deobf("de.teamlapen.vampirism:Vampirism:${project.minecraft_version}-${project.vampirism_version}")
    runtimeOnly fg.deobf("curse.maven:hwyla-253449:${hwyla_curse_version}")
}

minecraft {
    mappings channel: "${project.mcp_channel}".toString(), version: "${project.mcp_mappings}".toString()
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'runClient'
            main 'net.minecraftforge.userdev.LaunchTesting'
            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', 'REGISTRIES'
            workingDirectory project.file('run/client').canonicalPath
            jvmArg '-ea:de.teamlapen...'
            arg "-mixin.config=werewolves.mixins.json"

            mods {
                werewolves {
                    source sourceSets.main
                }
            }

        }
        client2 {
            parent runs.client
            taskName 'runClient2'
            args "-mixin.config=werewolves.mixins.json", '--username', 'Dev2'
        }
        server {
            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run/server').canonicalPath
            jvmArg '-ea:de.teamlapen...'
            arg "-mixin.config=werewolves.mixins.json"

            mods {
                werewolves {
                    source sourceSets.main
                }


            }
        }
        data {
            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run/data').canonicalPath
            args "-mixin.config=werewolves.mixins.json", '--mod', 'werewolves', '--all', '--output', file('src/generated/resources/'),  '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                werewolves {
                    source sourceSets.main
                }
            }
        }
    }

}

task downloadCrowdin() {
    ext {
        output = file('build/crowdin_raw.zip')
        update = file('build/crowdin.json')
        id = 'werewolves'
    }
    outputs.upToDateWhen { false }
    onlyIf {
        project.hasProperty('CROWDIN_KEY') && !project.gradle.startParameter.isOffline()
    }
    doLast {
        download {
            src "https://api.crowdin.com/api/project/${id}/export?key=${project.CROWDIN_KEY}&export_translated_only&json"
            dest update
            overwrite true
        }
        if (!update.text.contains('success')) {
            throw new RuntimeException("Crowdin export failed, see ${update} for more info")
        }
        download {
            src "https://api.crowdin.com/api/project/${id}/download/all.zip?key=${project.CROWDIN_KEY}"
            dest output
            overwrite true
        }
    }
}

task crowdin(type: Copy){
    dependsOn downloadCrowdin
    onlyIf {
        !downloadCrowdin.state.skipped
    }
    destinationDir = file('build/translations')
    from(zipTree(downloadCrowdin.output)){
        filter { String line ->
            line.indexOf("\"\"") != -1 ? null : line //Filter empty translations
        }
        filteringCharset = 'UTF-8'
        exclude { it.isDirectory() }
        rename { it.toLowerCase() }//Minecraft needs it lowercase.
    }
}

processResources {

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.mod_version, 'mcversion': minecraft_version, 'forge_version': forge_version, 'jei_version': jei_version, 'guideapi_version': guideapi_version, 'vampirism_version': vampirism_version
    }

    outputs.upToDateWhen { false }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    exclude '**/Thumbs.db'
}

jar {
    dependsOn 'crowdin'
    finalizedBy('reobfJar')

    //Keep the jar as clean as possible
    includeEmptyDirs = false

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    from{
        fileTree('build/translations').matching{
            exclude "**/en_us.json" //Don't override local source file
        }
    }



    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "werewolves",
                "Specification-Vendor": "cheaterpaul",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"cheaterpaul",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "werewolves.mixins.json"
        ])
    }

}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "werewolves.refmap.json"
}